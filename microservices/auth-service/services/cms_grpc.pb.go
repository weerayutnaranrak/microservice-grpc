// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cms.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentManagementService_FindOne_FullMethodName = "/cms.ContentManagementService/FindOne"
	ContentManagementService_FindAll_FullMethodName = "/cms.ContentManagementService/FindAll"
)

// ContentManagementServiceClient is the client API for ContentManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentManagementServiceClient interface {
	FindOne(ctx context.Context, in *ContentById, opts ...grpc.CallOption) (*Content, error)
	FindAll(ctx context.Context, in *ContentById, opts ...grpc.CallOption) (*Content, error)
}

type contentManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentManagementServiceClient(cc grpc.ClientConnInterface) ContentManagementServiceClient {
	return &contentManagementServiceClient{cc}
}

func (c *contentManagementServiceClient) FindOne(ctx context.Context, in *ContentById, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, ContentManagementService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagementServiceClient) FindAll(ctx context.Context, in *ContentById, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, ContentManagementService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentManagementServiceServer is the server API for ContentManagementService service.
// All implementations must embed UnimplementedContentManagementServiceServer
// for forward compatibility
type ContentManagementServiceServer interface {
	FindOne(context.Context, *ContentById) (*Content, error)
	FindAll(context.Context, *ContentById) (*Content, error)
	mustEmbedUnimplementedContentManagementServiceServer()
}

// UnimplementedContentManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentManagementServiceServer struct {
}

func (UnimplementedContentManagementServiceServer) FindOne(context.Context, *ContentById) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedContentManagementServiceServer) FindAll(context.Context, *ContentById) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedContentManagementServiceServer) mustEmbedUnimplementedContentManagementServiceServer() {
}

// UnsafeContentManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentManagementServiceServer will
// result in compilation errors.
type UnsafeContentManagementServiceServer interface {
	mustEmbedUnimplementedContentManagementServiceServer()
}

func RegisterContentManagementServiceServer(s grpc.ServiceRegistrar, srv ContentManagementServiceServer) {
	s.RegisterService(&ContentManagementService_ServiceDesc, srv)
}

func _ContentManagementService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagementServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagementService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagementServiceServer).FindOne(ctx, req.(*ContentById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagementService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagementServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagementService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagementServiceServer).FindAll(ctx, req.(*ContentById))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentManagementService_ServiceDesc is the grpc.ServiceDesc for ContentManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cms.ContentManagementService",
	HandlerType: (*ContentManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOne",
			Handler:    _ContentManagementService_FindOne_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _ContentManagementService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}
